% Решение краевой задачи Дирихле для уравнения Пуассона в прямоугольной области SpaceSize1*SpaceSize2
global x y DoubleStepX DoubleStepY H1 H2 H3 ParamRelax Om1 SpaceSize1 SpaceSize2
 
SpaceSize1=input('Задайте размер прямоугольной области по X: ');  % Задание размеров области 10
SpaceSize2=input('Задайте размер прямоугольной области по Y: ');  % Задание размеров области 6 
NumKnot1=input('Задайте число узлов сетки по X: ');  % Число узлов сетки по x 200
NumKnot2=input('Задайте число узлов сетки по Y: ');  % Число узлов сетки по y 120
StepX = SpaceSize1/NumKnot1;    % шаг сетки по x (деление размера области на число узлов сетки)
StepY = SpaceSize2/NumKnot2;    % шаг сетки по y (деление размера области на число узлов сетки)
 
for i=1:NumKnot1+1 % Координаты узлов сетки по X
    x(i)=(i-1)*StepX;  %Вычисление x(1) =  (1-1)* шаг сетки по Х
    disp(x(i)); % Вывод на экран
end
for j=1:NumKnot2+1 % Координаты узлов сетки по X
    y(j)=(j-1)*StepY; %Вычисление x(1) =  (1-1)* шаг сетки по Y
    disp(x(j)); % Вывод на экран
end
 
% Обобщенная задача Дирихле - задаем граничные условия для X и Y
for j=1:NumKnot2+1     %1..120
    mu(1,j)=10;    % (1,1) двухмерная матрица-потенциал на левой границе 
    mu(NumKnot1+1,j)=-10; % (201,1) двухмерная матрица-потенциал на правой границе 
end
for i=1:NumKnot1+1     %1..200
    mu(i,1)=5;     % (1,1) двухмерная матрица-потенциал на нижней границе
    mu(i,NumKnot2+1)=5;   % (1,121) двухмерная матрица-потенциал на верхней границе
end
% Задание начального приближения
for kx=2:NumKnot1   % 2..200
    for ky=2:NumKnot2  %2..120
        mu(kx,ky)=5; %
    end
end
 
ParamRelax = 0.8;     % Параметр релаксации
Om1 = 1 - ParamRelax; %0.2
IterationNumber = 200;  % Число итераций
DoubleStepX = StepX*StepX;     % шаг сетки по X в квадрате.
DoubleStepY = StepY*StepY;     % шаг сетки по Y в квадрате.
COM = 0.5 * ParamRelax / (DoubleStepX+DoubleStepY); % 0.5 * 0.8 (шаг сетки по Х в квадрате + шаг сетки по Y в квадрате)
H2 = DoubleStepX * COM; 
H1 = DoubleStepY * COM; 
H3 = H1*DoubleStepX;
 
z = puasson(NumKnot1,NumKnot2,IterationNumber,mu); % Решение уравнения Лапласа
% Формируется массив z [(N+1)x(M+1)*200], (N+1)x(M+1)-1 итерация, 
% (N+1)x(M+1) - 200 итерация
% формируется 2 массива (N+1)x(M+1) 
% x1 - одинаковые столбцы
% y1 - одинаковые строки
 
for i=1:NumKnot1+1 % 200
    for j=1:NumKnot2+1 %120
        x1(i,j)=x(i); %присваивание координатов узлов сетки по Х
        y1(i,j)=y(j); %присваивание координатов узлов сетки по Y
    end
end
 
K = 100; % Вывод решения на 100 итерации, для вывода линии уровня
j1=(NumKnot2+1)*(K-1); % (120+1)*(100-1) = 11,979
for i=1:NumKnot1+1 %200
    for j=1:NumKnot2+1 %120
        A(i,j)=z(i,j+j1); % z(1,1+11,979) Выделение K-того решения из общей матрицы решений
    end
end
 
 
 
K = 199; % Вывод решения на 199 итерации, для вывода линии уровня
j1=(NumKnot2+1)*(K-1);
for i=1:NumKnot1+1
    for j=1:NumKnot2+1
        A(i,j)=z(i,j+j1); % Выделение K-того решения из общей матрицы решений (матрица(N+1)x(M+1))
    end
end
 
figure(1); [C,h]=contour(A); % Правая граница вверху рисунка

%figure(2); [C,h]=contour(A,50);
figure(2); [C,h]=contour(x1,y1,A,50); % Рисунок привязан к сетке и правильно ориентирован

